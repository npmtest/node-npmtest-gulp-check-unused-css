{"/home/travis/build/npmtest/node-npmtest-gulp-check-unused-css/test.js":"/* istanbul instrument in package npmtest_gulp_check_unused_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-check-unused-css/lib.npmtest_gulp_check_unused_css.js":"/* istanbul instrument in package npmtest_gulp_check_unused_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_check_unused_css = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_check_unused_css = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-check-unused-css/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-check-unused-css && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_check_unused_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_check_unused_css\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_check_unused_css.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_check_unused_css.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_check_unused_css.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_check_unused_css.__dirname + '/lib.npmtest_gulp_check_unused_css.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-check-unused-css/node_modules/gulp-check-unused-css/src/check-css.js":"; // jshint ignore:line\n\n/**\n *  Copyright 2014 Zalando SE\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n**/\n\nvar gutil = require( 'gulp-util' ),     // for gulp plugin error\n    through = require( 'through2' ),    // stream library\n    css = require( 'css' ),             // css parser\n    html = require( 'htmlparser2' ),    // html parser,\n    _ = require( 'lodash' ),            // lodash for utilities\n\n    Regular = require( './collector/regular' ),\n    regularClass = new Regular(),\n\n    Angular = require( './collector/angular' ),\n    angularClass = new Angular(),\n\n    PLUGIN_NAME = 'gulp-check-unused-css';\n\nvar definedClasses = [],\n    globals = [],\n    usedClasses = [],\n    CLASS_REGEX = /\\.[a-zA-Z](?:[0-9A-Za-z_-])*/g;  // leading dot & a letter & digits, letters, _ or -\n\n// checks whether a class should be ignored\nfunction shouldIgnore( clazz ) {\n    'use strict';\n\n    return function( ignoreRule ) {\n        // we ignore it if an ignore regex matches\n        if ( _.isRegExp( ignoreRule ) ) {\n            return ignoreRule.test( clazz );\n        }\n        // we ignore it if an ignore string is equal\n        if ( _.isString( ignoreRule ) ) {\n            return ignoreRule === clazz;\n        }\n        return true;\n    };\n}\n\nfunction filterIgnored( ignore ) {\n    'use strict';\n\n    return function( clazz ) {\n        var ignoreThis = false,\n            isGlobal = globals.length ? _.indexOf( globals, clazz, true ) >= 0 : false;\n\n        // check if we should ignore this class\n        if ( ignore ) {\n            ignoreThis = _.some( ignore, shouldIgnore( clazz ) );\n        }\n        return ignoreThis ? false : !isGlobal;\n    };\n}\n\n// checks if the selectors of a CSS rule are a class\n// an adds them to the defined classes\nfunction getDefinedClasses( collection ) {\n    'use strict';\n\n    return function( rule ) {\n        if ( rule.type !== 'rule' ) {\n            return;\n        }\n        \n        if ( !rule.selectors ) {\n            return;\n        }\n\n        rule.selectors.forEach( function( selector ) {\n            var matches = selector.match( CLASS_REGEX );\n            if ( !matches ) {\n                return;\n            }\n\n            _.each( matches, function( match ) {\n                if ( _.indexOf( collection, match ) === -1 ) {\n                    collection.push( match.substring( 1 ) );\n                }\n            });\n        });\n    };\n}\n\n// actual function that gets exported\nfunction checkCSS( opts ) {\n    'use strict';\n\n    globals = [];\n    usedClasses = [];\n    definedClasses = [];\n\n    if ( typeof opts === 'undefined' ) {\n        opts = {};\n    }\n\n    var error,\n        ignore = opts.ignore || false;\n\n    // import global classes\n    if ( opts.globals ) {\n        opts.globals.forEach( function( global ) {\n            if ( _.isString( global ) ) {\n                globals.push.apply( globals, require( './global/' + global ) );\n            } else if ( _.isArray( global ) ) {\n                globals.push.apply( globals, global );\n            }\n        });\n        globals = _.sortBy( globals );\n    }\n\n    // create html parser\n    var htmlparser = new html.Parser({\n        onopentag: function onopentag( name, attribs ) {\n            var all = [];\n            \n            all.push.apply( all, regularClass.collect( attribs, opts.angular ) );\n\n            if ( opts.angular ) {\n                all.push.apply( all, angularClass.collect( attribs ) );\n            }\n\n            _.each( all, function( usedClass ) {\n                if ( _.indexOf( usedClasses, usedClass ) === -1 ) {\n                    usedClasses.push( usedClass );\n                }\n            });\n        }\n    });\n\n    var transform = through.obj( function( file, enc, done ) {\n        var self = this;\n\n        if ( file.isNull() ) {\n            self.push( file );\n            return done();\n        }\n\n        if ( file.isStream()) {\n            return done( new gutil.PluginError( PLUGIN_NAME, 'Streaming not supported' ) );\n        }\n\n        var ast;\n\n        // first try to parse css\n        try {\n            ast = css.parse( String( file.contents ), { silent: false } );\n            // find all classes in CSS\n            if ( ast.stylesheet ) {\n                ast.stylesheet.rules.forEach( getDefinedClasses( definedClasses ) );\n            }\n        } catch( ex ) {\n            // if it doesn't work, put it into html parser\n            // this has to work because in worst case no onOpenTag will be triggered\n            htmlparser.write( String( file.contents ) );\n        }\n\n        // just emit the file for later use\n        self.push( file );\n        done();\n    });\n\n    // we have to wait until we received all files\n    // otherwise we would throw an error after the first one\n    transform.on( 'finish', function() {\n        var badHTML,\n            badCSS,\n            usedUndefined = [], // in HTML, but not in CSS\n            definedUnused = []; // in CSS, but not in HTML\n\n\n        definedUnused = _.difference( definedClasses, usedClasses );    // only in CSS\n        usedUndefined = _.difference( usedClasses, definedClasses );    // only in HTML\n\n        badHTML = _.filter( usedUndefined, filterIgnored( ignore ) );\n        badCSS =  _.filter( definedUnused, filterIgnored( ignore ) );\n\n        if ( definedClasses.length && badCSS.length ) {\n            error = new Error( 'Unused CSS classes');\n            error.css = badCSS;\n        }\n        if ( usedClasses.length && badHTML.length ) {\n            if ( !error ) {\n                error = new Error( 'Undefined HTML classes' );\n            }\n            error.html = badHTML;\n        }\n\n        if ( error ) {\n            if ( error.css ) {\n                gutil.log.apply( gutil, [ gutil.colors.cyan( 'Unused CSS classes' ), error.css.join( ' ' ) ] );\n            }\n            if ( error.html ) {\n                gutil.log.apply( gutil, [ gutil.colors.cyan( 'Undefined HTML classes' ), error.html.join( ' ' ) ] );\n            }\n\n            this.emit( 'error', new gutil.PluginError( PLUGIN_NAME, error ) );\n        }\n    });\n\n    return transform;\n}\n\nmodule.exports = checkCSS;\n","/home/travis/build/npmtest/node-npmtest-gulp-check-unused-css/node_modules/gulp-check-unused-css/src/collector/regular.js":"function regularCollector() {\n    this.collect = function collect( attributes, angularSupport ) {\n        var hasClass = attributes[ 'class' ];\n        \n        return hasClass ?\n                hasClass\n                    .split( ' ' )\n                    .filter( function( clazz ) {\n                        return angularSupport ? clazz.substring( 0, 2 ) !== '{{' : true;\n                    })\n\n                : [];\n    }\n}\n\nmodule.exports = regularCollector;","/home/travis/build/npmtest/node-npmtest-gulp-check-unused-css/node_modules/gulp-check-unused-css/src/collector/angular.js":"var _ = require( 'lodash' );\n\nvar NG_TAG = /((data|x)[-:_])?ng[-:_]class/i;\n\nfunction angularCollector() {\n    this.collect = function collect( attributes ) {\n        var classes = [],\n            tags = [];\n\n        // collect all angular class tags in the attributes\n        Object\n        .keys( attributes )\n        .forEach( function( attr ) {\n            if ( NG_TAG.test( attr ) && tags.indexOf( attr ) === -1 ) {\n                tags.push( attr );\n            }\n        });\n\n        // now get dem classes\n        tags\n        .map( function( tag ) {\n            // assuming { condition: value } here\n            if ( attributes[ tag ][ 0 ] === '{' ) {\n\n\n                return attributes[ tag ]\n                    .split( ',' )\n                    .map( function( statement ) {\n                        return statement.substring( 0, statement.indexOf( ':' ) );\n                    })\n                    .map( function( clazz ) {\n                        var result = clazz.match( /[a-zA-Z0-9-_]+/gi );\n                        if ( result && result.length ) {\n                            return result[ 0 ];\n                        }\n                        return undefined;\n                    });\n            } else if ( [ '\\'', '\"' ].indexOf( attributes[ tag ][ 0 ] ) >= 0 ) {\n                // it's a string we need to check\n                return [ attributes[ tag ].substring( 1, attributes[ tag ].length - 1 ) ];\n            } else {\n                // it's a variable, ignore\n                return [];\n            }\n        })\n        .filter( function( clazz ) {\n            return !_.isUndefined( clazz );\n        })\n        .forEach( function( cs ) {\n            classes.push.apply( classes, cs );\n        });\n\n        return classes;\n    }\n}\n\nmodule.exports = angularCollector;","/home/travis/build/npmtest/node-npmtest-gulp-check-unused-css/node_modules/gulp-check-unused-css/Gulpfile.js":"var gulp = require( 'gulp' ),\n    cssmin = require( 'gulp-cssmin' ),\n    watch = require( 'gulp-watch' ),\n    plumber = require( 'gulp-plumber' ),\n    jshint = require( 'gulp-jshint' ),\n    gutil = require( 'gulp-util' ),\n    argv = require('minimist')(process.argv.slice(2)),\n    checkCSS = require( './src/check-css' );\n\nfunction check() {\n    return gulp\n        .src( 'test/bad-css/*.*' )\n        .pipe( argv.exit ? gutil.noop() : plumber() )\n        .pipe( checkCSS() )\n        .pipe( argv.exit ? gutil.noop() : plumber.stop() );\n}\n\ngulp.task( 'check', check );\n\n\ngulp.task( 'watch', function() {\n    return watch({ glob: 'test/bad-css/*.*' }, check );\n});\n\ngulp.task( 'jshint', function() {\n    return gulp.src( './src/check-css.js' )\n            .pipe( jshint() )\n            .pipe( jshint.reporter( 'jshint-stylish' ) );\n});","/home/travis/build/npmtest/node-npmtest-gulp-check-unused-css/node_modules/gulp-check-unused-css/util/extract.js":"// this module is used to extract classes from css frameworks like bootstrap\n\n'use strict';\n\nvar gutil = require( 'gulp-util' ),     // for gulp plugin error\n    css = require( 'css' ),             // css parser\n    fs = require( 'fs' ),               // file system access\n    _ = require( 'lodash' ),            // lodash for utilities\n    argv = require('minimist')(process.argv.slice(2));\n\nif ( !argv.file ) {\n    console.error( 'please provide a file with --file' );\n    return;\n}\n\nvar file = fs.readFileSync( argv.file ),\n    definedClasses = [],\n    CLASS_REGEX = /\\.[a-zA-Z](?:[0-9A-Za-z_-])+/g,\n    ast;\n\ntry {\n    ast = css.parse( String( file ), { silent: false } );\n} catch( cssError ) {\n    console.error( cssError.message );\n}\n\nast.stylesheet.rules.forEach(function( rule ) {\n    if ( !rule.type === 'rule ' ) {\n        return;\n    }\n\n    if ( !rule.selectors ) {\n        return;\n    }\n\n    rule.selectors.forEach( function( selector ) {\n        var matches = selector.match( CLASS_REGEX );\n        if ( !matches ) {\n            return;\n        }\n\n        matches.forEach( function( match ) {\n            if ( definedClasses.indexOf( match ) === -1 ) {\n                definedClasses.push( match );\n            }\n        });\n    });\n});\n\ndefinedClasses = definedClasses.map( function( c ) { return c.substring( 1 ); });\n\nvar ignoreFile = 'module.exports = ' + JSON.stringify( definedClasses ) + ';';\n\nfs.writeFileSync( argv.file + '.ignore', ignoreFile );","/home/travis/build/npmtest/node-npmtest-gulp-check-unused-css/node_modules/gulp-check-unused-css/src/global/bootstrap@3.2.0.js":"var globals = [\"glyphicon\",\"glyphicon-asterisk\",\"glyphicon-plus\",\"glyphicon-euro\",\"glyphicon-minus\",\"glyphicon-cloud\",\"glyphicon-envelope\",\"glyphicon-pencil\",\"glyphicon-glass\",\"glyphicon-music\",\"glyphicon-search\",\"glyphicon-heart\",\"glyphicon-star\",\"glyphicon-star-empty\",\"glyphicon-user\",\"glyphicon-film\",\"glyphicon-th-large\",\"glyphicon-th\",\"glyphicon-th-list\",\"glyphicon-ok\",\"glyphicon-remove\",\"glyphicon-zoom-in\",\"glyphicon-zoom-out\",\"glyphicon-off\",\"glyphicon-signal\",\"glyphicon-cog\",\"glyphicon-trash\",\"glyphicon-home\",\"glyphicon-file\",\"glyphicon-time\",\"glyphicon-road\",\"glyphicon-download-alt\",\"glyphicon-download\",\"glyphicon-upload\",\"glyphicon-inbox\",\"glyphicon-play-circle\",\"glyphicon-repeat\",\"glyphicon-refresh\",\"glyphicon-list-alt\",\"glyphicon-lock\",\"glyphicon-flag\",\"glyphicon-headphones\",\"glyphicon-volume-off\",\"glyphicon-volume-down\",\"glyphicon-volume-up\",\"glyphicon-qrcode\",\"glyphicon-barcode\",\"glyphicon-tag\",\"glyphicon-tags\",\"glyphicon-book\",\"glyphicon-bookmark\",\"glyphicon-print\",\"glyphicon-camera\",\"glyphicon-font\",\"glyphicon-bold\",\"glyphicon-italic\",\"glyphicon-text-height\",\"glyphicon-text-width\",\"glyphicon-align-left\",\"glyphicon-align-center\",\"glyphicon-align-right\",\"glyphicon-align-justify\",\"glyphicon-list\",\"glyphicon-indent-left\",\"glyphicon-indent-right\",\"glyphicon-facetime-video\",\"glyphicon-picture\",\"glyphicon-map-marker\",\"glyphicon-adjust\",\"glyphicon-tint\",\"glyphicon-edit\",\"glyphicon-share\",\"glyphicon-check\",\"glyphicon-move\",\"glyphicon-step-backward\",\"glyphicon-fast-backward\",\"glyphicon-backward\",\"glyphicon-play\",\"glyphicon-pause\",\"glyphicon-stop\",\"glyphicon-forward\",\"glyphicon-fast-forward\",\"glyphicon-step-forward\",\"glyphicon-eject\",\"glyphicon-chevron-left\",\"glyphicon-chevron-right\",\"glyphicon-plus-sign\",\"glyphicon-minus-sign\",\"glyphicon-remove-sign\",\"glyphicon-ok-sign\",\"glyphicon-question-sign\",\"glyphicon-info-sign\",\"glyphicon-screenshot\",\"glyphicon-remove-circle\",\"glyphicon-ok-circle\",\"glyphicon-ban-circle\",\"glyphicon-arrow-left\",\"glyphicon-arrow-right\",\"glyphicon-arrow-up\",\"glyphicon-arrow-down\",\"glyphicon-share-alt\",\"glyphicon-resize-full\",\"glyphicon-resize-small\",\"glyphicon-exclamation-sign\",\"glyphicon-gift\",\"glyphicon-leaf\",\"glyphicon-fire\",\"glyphicon-eye-open\",\"glyphicon-eye-close\",\"glyphicon-warning-sign\",\"glyphicon-plane\",\"glyphicon-calendar\",\"glyphicon-random\",\"glyphicon-comment\",\"glyphicon-magnet\",\"glyphicon-chevron-up\",\"glyphicon-chevron-down\",\"glyphicon-retweet\",\"glyphicon-shopping-cart\",\"glyphicon-folder-close\",\"glyphicon-folder-open\",\"glyphicon-resize-vertical\",\"glyphicon-resize-horizontal\",\"glyphicon-hdd\",\"glyphicon-bullhorn\",\"glyphicon-bell\",\"glyphicon-certificate\",\"glyphicon-thumbs-up\",\"glyphicon-thumbs-down\",\"glyphicon-hand-right\",\"glyphicon-hand-left\",\"glyphicon-hand-up\",\"glyphicon-hand-down\",\"glyphicon-circle-arrow-right\",\"glyphicon-circle-arrow-left\",\"glyphicon-circle-arrow-up\",\"glyphicon-circle-arrow-down\",\"glyphicon-globe\",\"glyphicon-wrench\",\"glyphicon-tasks\",\"glyphicon-filter\",\"glyphicon-briefcase\",\"glyphicon-fullscreen\",\"glyphicon-dashboard\",\"glyphicon-paperclip\",\"glyphicon-heart-empty\",\"glyphicon-link\",\"glyphicon-phone\",\"glyphicon-pushpin\",\"glyphicon-usd\",\"glyphicon-gbp\",\"glyphicon-sort\",\"glyphicon-sort-by-alphabet\",\"glyphicon-sort-by-alphabet-alt\",\"glyphicon-sort-by-order\",\"glyphicon-sort-by-order-alt\",\"glyphicon-sort-by-attributes\",\"glyphicon-sort-by-attributes-alt\",\"glyphicon-unchecked\",\"glyphicon-expand\",\"glyphicon-collapse-down\",\"glyphicon-collapse-up\",\"glyphicon-log-in\",\"glyphicon-flash\",\"glyphicon-log-out\",\"glyphicon-new-window\",\"glyphicon-record\",\"glyphicon-save\",\"glyphicon-open\",\"glyphicon-saved\",\"glyphicon-import\",\"glyphicon-export\",\"glyphicon-send\",\"glyphicon-floppy-disk\",\"glyphicon-floppy-saved\",\"glyphicon-floppy-remove\",\"glyphicon-floppy-save\",\"glyphicon-floppy-open\",\"glyphicon-credit-card\",\"glyphicon-transfer\",\"glyphicon-cutlery\",\"glyphicon-header\",\"glyphicon-compressed\",\"glyphicon-earphone\",\"glyphicon-phone-alt\",\"glyphicon-tower\",\"glyphicon-stats\",\"glyphicon-sd-video\",\"glyphicon-hd-video\",\"glyphicon-subtitles\",\"glyphicon-sound-stereo\",\"glyphicon-sound-dolby\",\"glyphicon-sound-5-1\",\"glyphicon-sound-6-1\",\"glyphicon-sound-7-1\",\"glyphicon-copyright-mark\",\"glyphicon-registration-mark\",\"glyphicon-cloud-download\",\"glyphicon-cloud-upload\",\"glyphicon-tree-conifer\",\"glyphicon-tree-deciduous\",\"img-responsive\",\"thumbnail\",\"carousel-inner\",\"item\",\"img-rounded\",\"img-thumbnail\",\"img-circle\",\"sr-only\",\"sr-only-focusable\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"small\",\"lead\",\"mark\",\"text-left\",\"text-right\",\"text-center\",\"text-justify\",\"text-nowrap\",\"text-lowercase\",\"text-uppercase\",\"text-capitalize\",\"text-muted\",\"text-primary\",\"text-success\",\"text-info\",\"text-warning\",\"text-danger\",\"bg-primary\",\"bg-success\",\"bg-info\",\"bg-warning\",\"bg-danger\",\"page-header\",\"list-unstyled\",\"list-inline\",\"initialism\",\"blockquote-reverse\",\"pull-right\",\"pre-scrollable\",\"container\",\"container-fluid\",\"row\",\"col-xs-1\",\"col-sm-1\",\"col-md-1\",\"col-lg-1\",\"col-xs-2\",\"col-sm-2\",\"col-md-2\",\"col-lg-2\",\"col-xs-3\",\"col-sm-3\",\"col-md-3\",\"col-lg-3\",\"col-xs-4\",\"col-sm-4\",\"col-md-4\",\"col-lg-4\",\"col-xs-5\",\"col-sm-5\",\"col-md-5\",\"col-lg-5\",\"col-xs-6\",\"col-sm-6\",\"col-md-6\",\"col-lg-6\",\"col-xs-7\",\"col-sm-7\",\"col-md-7\",\"col-lg-7\",\"col-xs-8\",\"col-sm-8\",\"col-md-8\",\"col-lg-8\",\"col-xs-9\",\"col-sm-9\",\"col-md-9\",\"col-lg-9\",\"col-xs-10\",\"col-sm-10\",\"col-md-10\",\"col-lg-10\",\"col-xs-11\",\"col-sm-11\",\"col-md-11\",\"col-lg-11\",\"col-xs-12\",\"col-sm-12\",\"col-md-12\",\"col-lg-12\",\"col-xs-pull-12\",\"col-xs-pull-11\",\"col-xs-pull-10\",\"col-xs-pull-9\",\"col-xs-pull-8\",\"col-xs-pull-7\",\"col-xs-pull-6\",\"col-xs-pull-5\",\"col-xs-pull-4\",\"col-xs-pull-3\",\"col-xs-pull-2\",\"col-xs-pull-1\",\"col-xs-pull-0\",\"col-xs-push-12\",\"col-xs-push-11\",\"col-xs-push-10\",\"col-xs-push-9\",\"col-xs-push-8\",\"col-xs-push-7\",\"col-xs-push-6\",\"col-xs-push-5\",\"col-xs-push-4\",\"col-xs-push-3\",\"col-xs-push-2\",\"col-xs-push-1\",\"col-xs-push-0\",\"col-xs-offset-12\",\"col-xs-offset-11\",\"col-xs-offset-10\",\"col-xs-offset-9\",\"col-xs-offset-8\",\"col-xs-offset-7\",\"col-xs-offset-6\",\"col-xs-offset-5\",\"col-xs-offset-4\",\"col-xs-offset-3\",\"col-xs-offset-2\",\"col-xs-offset-1\",\"col-xs-offset-0\",\"table\",\"table-condensed\",\"table-bordered\",\"table-striped\",\"table-hover\",\"active\",\"success\",\"info\",\"warning\",\"danger\",\"form-control\",\"input-sm\",\"input-lg\",\"form-group\",\"radio\",\"checkbox\",\"radio-inline\",\"checkbox-inline\",\"disabled\",\"form-control-static\",\"form-horizontal\",\"form-group-sm\",\"form-group-lg\",\"has-feedback\",\"form-control-feedback\",\"has-success\",\"help-block\",\"control-label\",\"input-group-addon\",\"has-warning\",\"has-error\",\"btn\",\"btn-default\",\"open\",\"dropdown-toggle\",\"badge\",\"btn-primary\",\"btn-success\",\"btn-info\",\"btn-warning\",\"btn-danger\",\"btn-link\",\"btn-lg\",\"btn-group-lg\",\"btn-sm\",\"btn-group-sm\",\"btn-xs\",\"btn-group-xs\",\"btn-block\",\"fade\",\"in\",\"collapse\",\"collapsing\",\"caret\",\"dropdown\",\"dropdown-menu\",\"divider\",\"dropdown-menu-right\",\"dropdown-menu-left\",\"dropdown-header\",\"dropdown-backdrop\",\"dropup\",\"navbar-fixed-bottom\",\"btn-group\",\"btn-group-vertical\",\"btn-toolbar\",\"input-group\",\"btn-group-justified\",\"input-group-lg\",\"input-group-btn\",\"input-group-sm\",\"nav\",\"nav-divider\",\"nav-tabs\",\"nav-justified\",\"nav-pills\",\"nav-stacked\",\"nav-tabs-justified\",\"tab-content\",\"tab-pane\",\"navbar\",\"navbar-collapse\",\"navbar-fixed-top\",\"navbar-header\",\"navbar-static-top\",\"navbar-brand\",\"navbar-toggle\",\"icon-bar\",\"navbar-nav\",\"navbar-form\",\"navbar-btn\",\"navbar-text\",\"navbar-default\",\"navbar-link\",\"navbar-inverse\",\"breadcrumb\",\"pagination\",\"pagination-lg\",\"pagination-sm\",\"pager\",\"next\",\"previous\",\"label\",\"label-default\",\"label-primary\",\"label-success\",\"label-info\",\"label-warning\",\"label-danger\",\"list-group-item\",\"jumbotron\",\"caption\",\"alert\",\"alert-link\",\"alert-dismissable\",\"alert-dismissible\",\"close\",\"alert-success\",\"alert-info\",\"alert-warning\",\"alert-danger\",\"progress\",\"progress-bar\",\"progress-striped\",\"progress-bar-striped\",\"progress-bar-success\",\"progress-bar-info\",\"progress-bar-warning\",\"progress-bar-danger\",\"media\",\"media-body\",\"media-object\",\"media-heading\",\"pull-left\",\"media-list\",\"list-group\",\"list-group-item-heading\",\"list-group-item-text\",\"list-group-item-success\",\"list-group-item-info\",\"list-group-item-warning\",\"list-group-item-danger\",\"panel\",\"panel-body\",\"panel-heading\",\"panel-title\",\"panel-footer\",\"table-responsive\",\"panel-collapse\",\"panel-group\",\"panel-default\",\"panel-primary\",\"panel-success\",\"panel-info\",\"panel-warning\",\"panel-danger\",\"embed-responsive\",\"embed-responsive-item\",\"embed-responsive-16by9\",\"embed-responsive-4by3\",\"well\",\"well-lg\",\"well-sm\",\"modal-open\",\"modal\",\"modal-dialog\",\"modal-content\",\"modal-backdrop\",\"modal-header\",\"modal-title\",\"modal-body\",\"modal-footer\",\"modal-scrollbar-measure\",\"tooltip\",\"top\",\"right\",\"bottom\",\"left\",\"tooltip-inner\",\"tooltip-arrow\",\"top-left\",\"top-right\",\"bottom-left\",\"bottom-right\",\"popover\",\"popover-title\",\"popover-content\",\"arrow\",\"carousel\",\"prev\",\"carousel-control\",\"icon-prev\",\"icon-next\",\"carousel-indicators\",\"carousel-caption\",\"clearfix\",\"dl-horizontal\",\"center-block\",\"hide\",\"show\",\"invisible\",\"text-hide\",\"hidden\",\"affix\",\"visible-xs\",\"visible-sm\",\"visible-md\",\"visible-lg\",\"visible-xs-block\",\"visible-xs-inline\",\"visible-xs-inline-block\",\"visible-sm-block\",\"visible-sm-inline\",\"visible-sm-inline-block\",\"visible-md-block\",\"visible-md-inline\",\"visible-md-inline-block\",\"visible-lg-block\",\"visible-lg-inline\",\"visible-lg-inline-block\",\"visible-print\",\"visible-print-block\",\"visible-print-inline\",\"visible-print-inline-block\"];\n\nmodule.exports = globals;"}